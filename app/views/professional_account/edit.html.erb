<%= form_for :professional_account, url: :update_account_professional_account, method: :patch, :html => { :class => "form-horizontal" } do |f| %>
    <h1>Update Your account</h1>

    <%= f.label :email%>
    <%= f.email_field :email, value: @professional.email,  class: "form-control"%>
    
    <%= f.label :name%>
    <%= f.text_field :name, value: @professional.name, class: "form-control"%>

    <%= f.label :business_email%>
    <%= f.email_field :business_email, value: @professional.business_email, class: "form-control"%>

    <%= f.label :secondary_email%>
    <%= f.email_field :secondary_email, value: @professional.secondary_email, class: "form-control"%>

    <%= f.label :address%>
    <%= f.text_field :address, value: @professional.address , class: "form-control", id: "autocomplete",  placeholder: "Enter your address",
             onFocus: "geolocate()"%>

    <%= f.label :contact%>
    <%= f.text_field :contact, value: @professional.contact , class: "form-control"%>

    <%= f.label :profile_photo%>
    <%= f.file_field :profile_photo, value: @professional.profile_photo , class: "form-control"%>

    <%= f.submit "Save"%>
<% end %>

<script type="text/javascript">
    var placeSearch, autocomplete;
    var componentForm = {
      street_number: 'short_name',
      route: 'long_name',
      locality: 'long_name',
      administrative_area_level_1: 'short_name',
      country: 'long_name',
      postal_code: 'short_name'
    };

    function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
          /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
          {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
    }

    function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
          }
        }
    }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAMof93EDC6Ig6LbVU5QunuMXgU5lNFzdc&libraries=places&callback=initAutocomplete"
    async defer>
  </script>
